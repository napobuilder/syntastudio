import React, { useState, useEffect, useRef } from 'react';

// AXIOM-DEV NOTE: Para que la fuente 'Space Grotesk' funcione, asegúrate de añadir
// la siguiente línea en la sección <head> de tu archivo public/index.html:
// <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300..700&display=swap" rel="stylesheet">
// Para el audio del juego, añade también:
// <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"></script>

// --- Iconos de Heroicons y Phosphor ---

const CodeBracketIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 mb-4 mx-auto text-[#8B5CF6]" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1.5}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M14.25 9.75L16.5 12l-2.25 2.25m-4.5 0L7.5 12l2.25-2.25M6 20.25h12A2.25 2.25 0 0020.25 18V6A2.25 2.25 0 0018 3.75H6A2.25 2.25 0 003.75 6v12A2.25 2.25 0 006 20.25z" />
    </svg>
);

const CpuChipIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 mb-4 mx-auto text-[#8B5CF6]" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1.5}>
         <path strokeLinecap="round" strokeLinejoin="round" d="M8.25 3v1.5M4.5 8.25H3m18 0h-1.5M4.5 12H3m18 0h-1.5m-15 3.75H3m18 0h-1.5M8.25 19.5V21M12 3v1.5m0 15V21m3.75-18v1.5m0 15V21m-9-1.5h10.5a2.25 2.25 0 002.25-2.25V6.75a2.25 2.25 0 00-2.25-2.25H6.75A2.25 2.25 0 004.5 6.75v10.5a2.25 2.25 0 002.25 2.25zm.75-12h9v9h-9v-9z" />
    </svg>
);

const SwatchIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 mb-4 mx-auto text-[#8B5CF6]" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1.5}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.158 0a.079.079 0 01.079-.079h.008a.079.079 0 01.079.079v.008a.079.079 0 01-.079.079h-.008a.079.079 0 01-.079-.079V8.25z" />
    </svg>
);

const CubeIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 mb-4 mx-auto text-[#8B5CF6]" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1.5}>
      <path strokeLinecap="round" strokeLinejoin="round" d="M21 7.5l-9-5.25L3 7.5m18 0l-9 5.25m9-5.25v9l-9 5.25M3 7.5l9 5.25M3 7.5v9l9 5.25m0-9v9" />
    </svg>
);


// Hook personalizado para observar intersecciones (Scroll Reveal)
const useIntersectionObserver = (options) => {
    const [entry, setEntry] = useState(null);
    const [node, setNode] = useState(null);
    const observer = useRef(null);

    useEffect(() => {
        if (observer.current) observer.current.disconnect();

        observer.current = new IntersectionObserver(([entry]) => {
            if (entry.isIntersecting) {
                setEntry(entry);
                observer.current.unobserve(entry.target);
            }
        }, options);

        const { current: currentObserver } = observer;
        if (node) currentObserver.observe(node);

        return () => currentObserver.disconnect();
    }, [node, options]);

    return [setNode, entry];
};

// Componente de revelado de scroll
const ScrollReveal = ({ children, delay = 0 }) => {
    const [ref, entry] = useIntersectionObserver({ threshold: 0.1 });
    const isVisible = !!entry;

    return (
        <div 
            ref={ref}
            className={`transition-all duration-700 ease-out ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-5'}`}
            style={{ transitionDelay: `${delay}ms` }}
        >
            {children}
        </div>
    );
};

// Componente Header
const Header = () => (
    <header className="fixed top-6 left-1/2 -translate-x-1/2 z-50 w-[90%] max-w-4xl">
        <nav className="bg-black/40 backdrop-blur-lg border border-white/20 rounded-full px-6 py-3 flex justify-between items-center shadow-black/30">
            <a href="#" className="flex items-center gap-x-2 text-2xl font-bold text-white">
                <div 
                    className="h-8 w-8 flex-shrink-0"
                    style={{
                        backgroundColor: '#8B5CF6',
                        backgroundImage: 'linear-gradient(to right, #a855f7, #f472b6, #8b5cf6)',
                        maskImage: 'url(https://i.imgur.com/vgnuj55.png)',
                        maskSize: 'contain',
                        maskRepeat: 'no-repeat',
                        maskPosition: 'center',
                        WebkitMaskImage: 'url(https://i.imgur.com/vgnuj55.png)',
                        WebkitMaskSize: 'contain',
                        WebkitMaskRepeat: 'no-repeat',
                        WebkitMaskPosition: 'center',
                    }}
                ></div>
                <span className="flex items-baseline">
                    <span>Synta</span>
                    <span className="ml-1 bg-gradient-to-r from-purple-400 via-pink-400 to-violet-500 text-transparent bg-clip-text">Studio</span>
                </span>
            </a>
            <div>
                <a href="#contact" className="text-white font-semibold py-2 px-5 rounded-full text-sm bg-gradient-to-r from-purple-500 via-pink-500 to-violet-600 transition-all duration-300 ease-in-out transform hover:-translate-y-0.5 hover:shadow-[0_0_20px_rgba(236,72,153,0.5)] active:scale-95">
                    Comenzar un Proyecto
                </a>
            </div>
        </nav>
    </header>
);

// Componente Canvas Animado
const HeroCanvas = () => {
    const canvasRef = useRef(null);

    useEffect(() => {
        const canvas = canvasRef.current;
        if (!canvas) return;
        const ctx = canvas.getContext('2d');
        let width, height, particles;
        let animationFrameId;

        class Particle {
            constructor() {
                this.x = Math.random() * width;
                this.y = Math.random() * height;
                this.size = Math.random() * 1.5 + 1;
                this.speedX = (Math.random() * 0.5) - 0.25;
                this.speedY = (Math.random() * 0.5) - 0.25;
                this.color = `rgba(139, 92, 246, ${Math.random() * 0.8 + 0.2})`;
            }
            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                if (this.size > 0.1) this.size -= 0.01;
                if (this.x < 0 || this.x > width || this.y < 0 || this.y > height) {
                    this.x = Math.random() * width;
                    this.y = Math.random() * height;
                    this.size = Math.random() * 1.5 + 1;
                }
            }
            draw() {
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
            }
        }

        const setup = () => {
            const hero = document.querySelector('.min-h-screen');
            if (!hero) return;
            width = canvas.width = hero.offsetWidth;
            height = canvas.height = hero.offsetHeight;
            particles = [];
            const particleCount = Math.floor(width / 30);
            for (let i = 0; i < particleCount; i++) {
                particles.push(new Particle());
            }
        };

        const animate = () => {
            ctx.clearRect(0, 0, width, height);
            particles.forEach(p => {
                p.update();
                p.draw();
            });
            animationFrameId = requestAnimationFrame(animate);
        };
        
        setup();
        animate();

        window.addEventListener('resize', setup);

        return () => {
            window.removeEventListener('resize', setup);
            cancelAnimationFrame(animationFrameId);
        };
    }, []);

    return <canvas ref={canvasRef} id="hero-canvas" className="absolute top-0 left-0 w-full h-full z-0 opacity-30" style={{ maskImage: 'radial-gradient(ellipse 80% 50% at 50% 50%, black 40%, transparent 70%)' }}></canvas>;
};

// Componente Hero
const Hero = () => (
    <section 
        className="relative min-h-screen flex items-center text-center py-20 lg:py-24 overflow-hidden"
        style={{
            backgroundImage: `
                radial-gradient(ellipse 50% 50% at 90% 10%, hsla(258, 82%, 58%, 0.15) 0px, transparent 50%),
                radial-gradient(ellipse 50% 50% at 10% 90%, hsla(258, 82%, 58%, 0.1) 0px, transparent 50%)
            `
        }}
    >
        <HeroCanvas />
        <div className="relative z-10 container mx-auto px-6">
            <div className="max-w-4xl mx-auto">
                 <ScrollReveal>
                    <h1 className="text-4xl md:text-6xl font-extrabold leading-tight mb-6 text-white tracking-tighter" style={{ textShadow: '0px 0px 20px rgba(0,0,0,0.5)' }}>
                        Desarrollo de Aplicaciones Web y Soluciones con IA
                    </h1>
                </ScrollReveal>
                <ScrollReveal delay={150}>
                    <p className="text-lg md:text-xl max-w-3xl mx-auto mb-10 text-[#A3A3A3] font-light">
                        Transformamos tus ideas en software robusto, escalable y centrado en el usuario. Desde webs corporativas hasta complejas integraciones de IA.
                    </p>
                </ScrollReveal>
                <ScrollReveal delay={300}>
                    <div className="flex flex-wrap justify-center gap-4">
                        <a href="#contact" className="text-white font-semibold py-3 px-8 rounded-full text-lg bg-gradient-to-r from-purple-500 via-pink-500 to-violet-600 transition-all duration-300 ease-in-out transform hover:-translate-y-0.5 hover:shadow-[0_0_25px_rgba(236,72,153,0.6)] active:scale-95">
                            Agendar una Consulta
                        </a>
                        <a href="#portfolio" className="text-white font-semibold py-3 px-8 rounded-full text-lg bg-white/5 hover:bg-white/10 border border-[#222222] hover:border-pink-400/50 transition-all duration-300 ease-in-out hover:shadow-[0_0_20px_rgba(236,72,153,0.3)] active:scale-95">
                            Ver Proyectos
                        </a>
                    </div>
                </ScrollReveal>
            </div>
        </div>
    </section>
);


// Componente de Tarjeta de Servicio
const ServiceCard = ({ icon, title, children }) => (
    <div className="h-full bg-[#111111] border border-[#222222] p-8 rounded-lg text-center transition-all duration-300 hover:-translate-y-1.5 hover:border-[#8B5CF6] flex flex-col">
        <div>
            {icon}
            <h3 className="text-xl font-bold mb-3 text-white">{title}</h3>
        </div>
        <p className="text-[#A3A3A3] mt-2 font-light">{children}</p>
    </div>
);

// Componente de Servicios
const Services = () => (
    <section id="services" className="py-20 lg:py-24 relative z-10 bg-[#000000] border-t border-b border-[#222222]">
        <div className="container mx-auto px-6">
            <div className="text-center mb-16">
                 <ScrollReveal>
                    <h2 className="text-3xl md:text-4xl font-bold text-white tracking-tight">Nuestros Servicios</h2>
                </ScrollReveal>
                <ScrollReveal delay={150}>
                    <p className="text-lg mt-4 max-w-2xl mx-auto text-[#A3A3A3] font-light">Soluciones a medida para cada etapa de tu proyecto.</p>
                </ScrollReveal>
            </div>
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
                <ScrollReveal delay={0}>
                    <ServiceCard title="Desarrollo Full-Stack" icon={<CodeBracketIcon />}>
                        Aplicaciones web completas utilizando tecnologías modernas como React, Zustand y Node.js para un rendimiento excepcional.
                    </ServiceCard>
                </ScrollReveal>
                <ScrollReveal delay={150}>
                    <ServiceCard title="Integración de IA" icon={<CpuChipIcon />}>
                        Potenciamos tus apps con modelos como Gemini para crear experiencias inteligentes y automatizar procesos.
                    </ServiceCard>
                </ScrollReveal>
                <ScrollReveal delay={300}>
                    <ServiceCard title="Diseño UX/UI" icon={<SwatchIcon />}>
                        Interfaces intuitivas y atractivas diseñadas para ofrecer una experiencia de usuario fluida y memorable.
                    </ServiceCard>
                </ScrollReveal>
                <ScrollReveal delay={450}>
                     <ServiceCard title="Micro-SaaS a Medida" icon={<CubeIcon />}>
                        Conceptualizamos y construimos productos de nicho, listos para generar ingresos recurrentes.
                    </ServiceCard>
                </ScrollReveal>
            </div>
        </div>
    </section>
);


// Componente de Tarjeta de Proyecto
const ProjectCard = ({ imgSrc, title, children }) => (
    <div className="h-full bg-[#111111] border border-[#222222] rounded-lg overflow-hidden transition-all duration-300 hover:-translate-y-1.5 hover:border-[#8B5CF6] flex flex-col">
        <img src={imgSrc} alt={`${title} Project`} className="w-full h-64 object-cover flex-shrink-0" />
        <div className="p-8 flex flex-col flex-grow">
            <h3 className="text-2xl font-bold mb-3 text-white">{title}</h3>
            <p className="text-[#A3A3A3] font-light">{children}</p>
        </div>
    </div>
);

// Componente de Portfolio
const Portfolio = () => (
    <section id="portfolio" className="py-20 lg:py-24 relative z-10 bg-[#111111] border-t border-[#222222]">
        <div className="container mx-auto px-6">
            <div className="text-center mb-16">
                <ScrollReveal>
                    <h2 className="text-3xl md:text-4xl font-bold text-white tracking-tight">Proyectos Destacados</h2>
                </ScrollReveal>
                <ScrollReveal delay={150}>
                    <p className="text-lg mt-4 max-w-2xl mx-auto text-[#A3A3A3] font-light">Una muestra de nuestro trabajo en acción.</p>
                </ScrollReveal>
            </div>
            <div className="grid md:grid-cols-2 gap-8">
                 <ScrollReveal delay={0}>
                    <ProjectCard
                        imgSrc="https://i.imgur.com/uR2cM5n.png"
                        title="NeuroMetric"
                    >
                        Una plataforma SaaS de nicho diseñada para modernizar la práctica psiquiátrica. Automatiza la recolección de datos del paciente a través de formularios interactivos y provee diagnósticos preliminares asistidos por IA, optimizando el tiempo del especialista.
                    </ProjectCard>
                </ScrollReveal>
                <ScrollReveal delay={150}>
                    <ProjectCard
                        imgSrc="https://i.imgur.com/4t9eAZn.png"
                        title="AgentDeck"
                    >
                        Un laboratorio de 'Context Engineering' para la API de Gemini. Esta herramienta interna permite a los desarrolladores construir, probar y colaborar en una librería de agentes de IA, acelerando radicalmente el ciclo de desarrollo de aplicaciones inteligentes.
                    </ProjectCard>
                </ScrollReveal>
            </div>
        </div>
    </section>
);

// Componente "Sobre mí"
const About = () => (
    <section id="about" className="py-20 lg:py-24 relative z-10 bg-[#000000]">
        <div className="container mx-auto px-6">
            <ScrollReveal>
                <div className="bg-[#111111] border border-[#222222] rounded-lg p-8 md:p-12 flex flex-col md:flex-row items-center gap-8 md:gap-12">
                    <div className="flex-shrink-0">
                        <img src="https://i.imgur.com/kDRy846.png" alt="Foto del fundador, Napoleon Baca" className="rounded-full w-40 h-40 md:w-48 md:h-48 object-cover border-4 border-[#222222]" />
                    </div>
                    <div className="text-center md:text-left">
                        <p className="text-xl md:text-2xl text-[#A3A3A3] font-light" style={{ lineHeight: 1.6 }}>
                            "Soy un desarrollador full-stack que usa la IA como su co-piloto de ingeniería. Mediante el 'Context Engineering', traduzco visiones complejas en software excepcional, a una velocidad que redefine lo que es posible."
                        </p>
                        <div className="flex items-center justify-center md:justify-start mt-4">
                            <p className="text-lg font-bold text-white">— Napoleon Baca</p>
                            <a href="https://www.linkedin.com/in/napoleonbaca/" target="_blank" rel="noopener noreferrer" className="ml-3 text-white hover:text-pink-400 transition-colors duration-300">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/>
                                </svg>
                            </a>
                        </div>
                    </div>
                </div>
            </ScrollReveal>
        </div>
    </section>
);


// Componente de Formulario de Contacto (Refactorizado con UX/UI Senior)
const ContactForm = () => {
    const [currentStep, setCurrentStep] = useState(1);
    const [formData, setFormData] = useState({ budget: '', service: '', name: '', email: '' });
    const [message, setMessage] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);
    const totalSteps = 3;

    const handleOptionSelect = (group, value) => {
        setFormData(prev => ({ ...prev, [group]: value }));
        setTimeout(() => {
            if (currentStep < totalSteps) setCurrentStep(currentStep + 1);
        }, 300);
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!formData.name || !formData.email) {
            setMessage({ type: 'error', text: 'Por favor, completa tu nombre y email.' });
            return;
        }

        setIsSubmitting(true);
        setMessage({ type: 'success', text: `¡Gracias, ${formData.name}! Tu solicitud ha sido enviada.` });
        console.log('Formulario enviado:', formData);

        setTimeout(() => {
            setIsSubmitting(false);
            setCurrentStep(1);
            setFormData({ budget: '', service: '', name: '', email: '' });
        }, 3000);
    };

    const ProgressBar = () => (
        <div className="w-full px-4 sm:px-0">
            <div className="relative w-full h-1 bg-[#222222] rounded-full mb-8">
                <div 
                    className="absolute top-0 left-0 h-1 bg-gradient-to-r from-purple-500 via-pink-500 to-violet-600 rounded-full transition-all duration-500 ease-out"
                    style={{ width: `${((currentStep - 1) / (totalSteps - 1)) * 100}%` }}
                ></div>
            </div>
        </div>
    );

    const OptionButton = ({ group, value }) => (
        <button
            type="button"
            onClick={() => handleOptionSelect(group, value)}
            className={`p-4 rounded-lg transition-all duration-200 w-full text-white transform active:scale-95 ${formData[group] === value ? 'border-pink-400 bg-pink-500/10 ring-2 ring-pink-400' : 'bg-[#111111] border border-[#222222] hover:border-pink-400/50 hover:bg-[#1a1a1a]'}`}
        >
            {value}
        </button>
    );

    const FloatingLabelInput = ({ id, type, placeholder, value, onChange }) => (
        <div className="relative">
            <input
                id={id}
                type={type}
                placeholder=" " 
                className="peer w-full p-3 bg-[#111111] border border-[#222222] text-white rounded-lg focus:outline-none focus:border-pink-400 transition-colors"
                value={value}
                onChange={onChange}
                required
            />
            <label
                htmlFor={id}
                className="absolute text-sm text-gray-400 duration-300 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] bg-[#111111] px-2 left-1 peer-focus:px-2 peer-focus:text-pink-400 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4"
            >
                {placeholder}
            </label>
        </div>
    );

    return (
        <ScrollReveal>
            <div 
                className="max-w-2xl mx-auto p-6 sm:p-10 border border-[#222222] rounded-lg"
                style={{
                    backgroundColor: '#0a0a0a',
                    backgroundImage: `
                        radial-gradient(at 20% 80%, hsla(258, 82%, 58%, 0.2) 0px, transparent 50%),
                        radial-gradient(at 80% 10%, hsla(320, 82%, 58%, 0.25) 0px, transparent 50%)
                    `
                }}
            >
                <ProgressBar />
                <div className="relative overflow-hidden" style={{ minHeight: '220px' }}>
                    <form onSubmit={handleSubmit} className="space-y-8">
                        {/* Step 1 */}
                        <div className={`absolute w-full transition-all duration-500 ease-in-out ${currentStep === 1 ? 'opacity-100 translate-x-0' : 'opacity-0 -translate-x-full'}`}>
                            <label className="block text-lg font-semibold mb-4 text-center text-white">¿Cuál es tu presupuesto?</label>
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                                {['$1-2k', '$2-5k', '$5-10k', '$10k+'].map(val => <OptionButton key={val} group="budget" value={val} />)}
                            </div>
                        </div>
                        {/* Step 2 */}
                        <div className={`absolute w-full transition-all duration-500 ease-in-out ${currentStep === 2 ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-full'}`}>
                             <label className="block text-lg font-semibold mb-4 text-center text-white">¿Qué servicio te interesa?</label>
                            <div className="grid grid-cols-2 gap-4">
                                {['Desarrollo Full-Stack', 'Integración de IA', 'Diseño UX/UI', 'Micro-SaaS'].map(val => <OptionButton key={val} group="service" value={val} />)}
                            </div>
                        </div>
                        {/* Step 3 */}
                         <div className={`absolute w-full transition-all duration-500 ease-in-out ${currentStep === 3 ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-full'}`}>
                            <label className="block text-lg font-semibold mb-4 text-center text-white">¡Casi listos!</label>
                            <div className="space-y-6">
                                <FloatingLabelInput id="name" type="text" placeholder="Tu Nombre" value={formData.name} onChange={e => setFormData({ ...formData, name: e.target.value })} />
                                <FloatingLabelInput id="email" type="email" placeholder="Tu Mejor Email" value={formData.email} onChange={e => setFormData({ ...formData, email: e.target.value })} />
                            </div>
                             <div className="flex justify-center pt-8">
                                <button type="submit" disabled={isSubmitting} className="text-white font-semibold py-3 px-8 rounded-full text-lg bg-gradient-to-r from-purple-500 via-pink-500 to-violet-600 transition-all duration-300 ease-in-out transform hover:-translate-y-0.5 hover:shadow-[0_0_25px_rgba(236,72,153,0.6)] active:scale-95 disabled:bg-gray-500 disabled:cursor-not-allowed disabled:shadow-none disabled:transform-none">
                                    {isSubmitting ? 'Enviando...' : 'Enviar Solicitud'}
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
                 {message && <div className={`mt-6 text-center text-sm ${message.type === 'error' ? 'text-red-400' : 'text-green-400'}`}>{message.text}</div>}
            </div>
        </ScrollReveal>
    );
};

// Componente de Contacto
const Contact = () => (
    <section id="contact" className="py-20 lg:py-24 relative z-10 bg-[#111111]">
        <div className="container mx-auto px-6">
            <div className="text-center mb-16">
                <ScrollReveal>
                    <h2 className="text-3xl md:text-4xl font-bold text-white tracking-tight">Hagamos Realidad Tu Idea</h2>
                </ScrollReveal>
                <ScrollReveal delay={150}>
                    <p className="text-lg mt-4 max-w-2xl mx-auto text-[#A3A3A3] font-light">Completa los siguientes pasos para agendar una consulta estratégica gratuita.</p>
                </ScrollReveal>
            </div>
            <ContactForm />
        </div>
    </section>
);

// --- Componente del Juego Breakout ---
const BreakoutGame = () => {
    const canvasRef = useRef(null);
    const [gameState, setGameState] = useState('initial'); // initial, playing, win, gameOver
    const [soundEnabled, setSoundEnabled] = useState(true);
    const gameInstance = useRef(null);
    const synths = useRef(null);

    // Inicializar sintetizadores de Tone.js una sola vez
    useEffect(() => {
        if (typeof window !== 'undefined' && window.Tone && !synths.current) {
            synths.current = {
                blip: new window.Tone.Synth({ oscillator: { type: 'sine' }, envelope: { attack: 0.01, decay: 0.1, sustain: 0.1, release: 0.2 } }).toDestination(),
                destroy: new window.Tone.MembraneSynth({ pitchDecay: 0.01, octaves: 6, envelope: { attack: 0.001, decay: 0.2, sustain: 0 } }).toDestination(),
                gameOver: new window.Tone.Synth({ oscillator: { type: 'sawtooth' }, envelope: { attack: 0.01, decay: 1, sustain: 0, release: 1 } }).toDestination(),
                win: new window.Tone.PluckSynth().toDestination(),
            };
        }
    }, []);

    const playSound = (synth, note, duration) => {
        if (soundEnabled && synths.current && synths.current[synth]) {
            synths.current[synth].triggerAttackRelease(note, duration);
        }
    };

    useEffect(() => {
        if (gameState !== 'playing') {
            if (gameInstance.current) gameInstance.current.stop();
            return;
        }

        const canvas = canvasRef.current;
        const ctx = canvas.getContext('2d');
        let width = canvas.parentElement.offsetWidth;
        let height = 500;
        canvas.width = width;
        canvas.height = height;

        let ball, paddle, bricks, score, lives, rightPressed, leftPressed;
        let animationFrameId;

        function resetBallAndPaddle() {
            ball = { x: width / 2, y: height - 50, dx: 4 * (Math.random() > 0.5 ? 1 : -1), dy: -4, radius: 8 };
            paddle = { height: 12, width: 100, x: (width - 100) / 2 };
        }
        
        function newGame() {
            score = 0;
            lives = 3;
            resetBallAndPaddle();
            const brickRowCount = 5;
            const brickColumnCount = Math.max(1, Math.floor(width / (75 + 10)) - 1);
            bricks = [];
            for (let c = 0; c < brickColumnCount; c++) {
                bricks[c] = [];
                for (let r = 0; r < brickRowCount; r++) {
                    bricks[c][r] = { x: 0, y: 0, status: 1, color: (r % 2 === 0) ? "white" : "#ddd" };
                }
            }
        }
        
        const keyDownHandler = (e) => {
            if (e.code === "ArrowRight") rightPressed = true;
            else if (e.code === "ArrowLeft") leftPressed = true;
        };
        const keyUpHandler = (e) => {
            if (e.code === "ArrowRight") rightPressed = false;
            else if (e.code === "ArrowLeft") leftPressed = false;
        };

        document.addEventListener("keydown", keyDownHandler, false);
        document.addEventListener("keyup", keyUpHandler, false);

        function collisionDetection() {
            for (let c = 0; c < bricks.length; c++) {
                for (let r = 0; r < bricks[c].length; r++) {
                    const b = bricks[c][r];
                    if (b.status === 1) {
                         const brickWidth = 75;
                         const brickHeight = 20;
                        if (ball.x > b.x && ball.x < b.x + brickWidth && ball.y > b.y && ball.y < b.y + brickHeight) {
                            ball.dy = -ball.dy;
                            b.status = 0;
                            score++;
                            playSound('destroy', 'C2', '8n');
                            if (score === bricks.length * bricks[0].length) {
                                playSound('win', 'C5', '4n');
                                setGameState('win');
                            }
                        }
                    }
                }
            }
        }
        
        function drawElements() {
             ctx.clearRect(0, 0, width, height);
             const brickWidth = 75; const brickHeight = 20; const brickPadding = 10; const brickOffsetTop = 30; const brickOffsetLeft = 30;
            for (let c = 0; c < bricks.length; c++) {
                for (let r = 0; r < bricks[c].length; r++) {
                    if (bricks[c][r].status === 1) {
                        const brickX = c * (brickWidth + brickPadding) + brickOffsetLeft;
                        const brickY = r * (brickHeight + brickPadding) + brickOffsetTop;
                        bricks[c][r].x = brickX; bricks[c][r].y = brickY;
                        ctx.beginPath(); ctx.rect(brickX, brickY, brickWidth, brickHeight); ctx.fillStyle = bricks[c][r].color; ctx.fill(); ctx.closePath();
                    }
                }
            }
            ctx.beginPath(); ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2); ctx.fillStyle = "#8B5CF6"; ctx.fill(); ctx.closePath();
            ctx.beginPath(); ctx.rect(paddle.x, height - paddle.height, paddle.width, paddle.height); ctx.fillStyle = "white"; ctx.fill(); ctx.closePath();
            ctx.font = "16px 'Space Grotesk'"; ctx.fillStyle = "white"; ctx.fillText("Score: " + score, 8, 20);
            ctx.fillText("Vidas: " + lives, width - 65, 20);
        }

        function draw() {
            drawElements();
            collisionDetection();
            if (ball.x + ball.dx > width - ball.radius || ball.x + ball.dx < ball.radius) {
                ball.dx = -ball.dx;
                playSound('blip', 'A4', '16n');
            }
            if (ball.y + ball.dy < ball.radius) {
                ball.dy = -ball.dy;
                playSound('blip', 'A4', '16n');
            } else if (ball.y + ball.dy > height - ball.radius) {
                if (ball.x > paddle.x && ball.x < paddle.x + paddle.width) {
                    ball.dy = -ball.dy;
                    playSound('blip', 'E4', '16n');
                } else {
                    lives--;
                    if (!lives) {
                        playSound('gameOver', 'C2', '1n');
                        setGameState('gameOver');
                    } else {
                        resetBallAndPaddle();
                    }
                }
            }

            if (rightPressed && paddle.x < width - paddle.width) paddle.x += 7;
            else if (leftPressed && paddle.x > 0) paddle.x -= 7;

            ball.x += ball.dx;
            ball.y += ball.dy;
            animationFrameId = requestAnimationFrame(draw);
        }
        
        const handleResize = () => { width = canvas.parentElement.offsetWidth; canvas.width = width; newGame(); };
        window.addEventListener('resize', handleResize);
        newGame();
        draw();
        
        gameInstance.current = { stop: () => { cancelAnimationFrame(animationFrameId); document.removeEventListener("keydown", keyDownHandler); document.removeEventListener("keyup", keyUpHandler); window.removeEventListener('resize', handleResize); } };
        
        return () => { if (gameInstance.current) gameInstance.current.stop(); };
    }, [gameState, soundEnabled]);

    const handleStart = async () => {
        if (typeof window !== 'undefined' && window.Tone && window.Tone.context.state !== 'running') {
            await window.Tone.start();
        }
        setGameState('playing');
    }

    const GameOverlay = ({ title, buttonText }) => (
        <div className="absolute inset-0 bg-black/70 flex flex-col justify-center items-center z-20 rounded-lg backdrop-blur-sm">
            <h3 className="text-4xl font-bold text-white mb-4">{title}</h3>
            <button 
                onClick={handleStart} 
                className="text-white font-semibold py-3 px-8 rounded-full text-lg bg-gradient-to-r from-purple-500 via-pink-500 to-violet-600 transition-all duration-300 ease-in-out transform hover:-translate-y-0.5 hover:shadow-[0_0_25px_rgba(236,72,153,0.6)] active:scale-95"
            >
                {buttonText}
            </button>
        </div>
    );
    
    const SoundToggle = () => (
        <button onClick={() => setSoundEnabled(!soundEnabled)} className="absolute top-3 right-3 z-30 text-white p-2 bg-white/10 rounded-full hover:bg-white/20">
            {soundEnabled ? 
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path></svg> :
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><line x1="23" y1="9" x2="17" y2="15"></line><line x1="17" y1="9" x2="23" y2="15"></line></svg>
            }
        </button>
    );

    return (
        <div className="relative">
            <SoundToggle />
            {gameState !== 'playing' && (
                <GameOverlay 
                    title={ gameState === 'win' ? '¡Ganaste!' : gameState === 'gameOver' ? 'Game Over' : '' }
                    buttonText={ gameState === 'initial' ? 'Jugar' : 'Jugar de Nuevo' }
                />
            )}
            <canvas ref={canvasRef} className="w-full bg-black border border-[#222222] rounded-lg"></canvas>
        </div>
    );
};


const GameSection = () => (
    <section id="game" className="py-20 lg:py-24 relative z-10 bg-black">
        <div className="container mx-auto px-6">
            <div className="text-center mb-12">
                <ScrollReveal>
                    <h2 className="text-3xl md:text-4xl font-bold text-white tracking-tight">Un Pequeño Experimento...</h2>
                </ScrollReveal>
                <ScrollReveal delay={150}>
                    <p className="text-lg mt-4 max-w-2xl mx-auto text-[#A3A3A3] font-light">Ya que llegaste hasta aquí, te mereces jugar un poco. Demostración de lo que se puede construir en una tarde con React.</p>
                </ScrollReveal>
                 <ScrollReveal delay={300}>
                    <p className="text-sm mt-4 text-pink-400 font-semibold">Usa [←] y [→] para mover la paleta.</p>
                </ScrollReveal>
            </div>
            <ScrollReveal delay={450}>
                <div className="max-w-4xl mx-auto">
                    <BreakoutGame />
                </div>
            </ScrollReveal>
        </div>
    </section>
);


// Componente Footer
const Footer = () => (
    <footer className="bg-black border-t border-[#222222] py-8">
        <div className="container mx-auto px-6 text-center text-[#A3A3A3]">
            <p>&copy; {new Date().getFullYear()} Synta Studio. Todos los derechos reservados.</p>
        </div>
    </footer>
);

// Componente Principal App
export default function App() {
    return (
        <div className="bg-black font-['Space_Grotesk',_sans-serif] antialiased overflow-x-hidden">
            <Header />
            <main>
                <Hero />
                <Services />
                <Portfolio />
                <About />
                <Contact />
                <GameSection />
            </main>
            <Footer />
        </div>
    );
}

